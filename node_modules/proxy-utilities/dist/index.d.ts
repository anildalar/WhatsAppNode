/**
 * Inputted settings for a given proxy, passed as extra parameters into any check function.
 */
interface ProxySettings {
    /**
     * Credentials of the proxy, if any.
     * @param username string The username for the proxy
     * @param password string The password for the proxy
     */
    credentials?: {
        username: string;
        password: string;
    };
}
interface ProxyResult extends ProxySettings {
    /** The IP address for the proxy */
    address: string;
    /** The port for the proxy */
    port: string;
}
/**
 * Options for the proxy manager constructor.
 */
interface ProxyManagerOptions {
    /** Which https domains to attempt */
    httpsDomains?: string[];
    /** Which http domains to attempt */
    httpDomains?: string[];
    /** Which google domains to attempt */
    googleDomains?: string[];
    /** Timeout in ms until attempt fail */
    timeout?: number;
}
/**
 * The ProxyManager class, where all checks can be utilized.
 */
export declare class ProxyManager {
    static s_httpsDomains: string[];
    static s_httpDomains: string[];
    static s_googleDomains: string[];
    static timeout: number;
    private _httpsDomains;
    private _httpDomains;
    private _googleDomains;
    private _timeout;
    constructor(options: ProxyManagerOptions);
    get httpsDomains(): string[];
    get httpDomains(): string[];
    get googleDomains(): string[];
    get timeout(): number;
    /**
     * Check against a single proxy with minimal configuration.
     *
     * @param address The proxy's IP address
     * @param port The proxy's port
     * @param settings The settings for the proxy
     */
    static fastCheck(address: string, port: string | number, settings?: ProxySettings): Promise<ProxyResult>;
}
export {};
//# sourceMappingURL=index.d.ts.map