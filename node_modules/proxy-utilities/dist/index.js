"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
/**
 * The ProxyManager class, where all checks can be utilized.
 */
class ProxyManager {
    constructor(options) {
        this._httpsDomains = options.httpsDomains ? options.httpsDomains : ProxyManager.s_httpsDomains;
        this._httpDomains = options.httpDomains ? options.httpDomains : ProxyManager.s_httpDomains;
        this._googleDomains = options.googleDomains ? options.googleDomains : ProxyManager.s_googleDomains;
        this._timeout = options.timeout ? options.timeout : 1000;
    }
    get httpsDomains() { return this._httpsDomains; }
    get httpDomains() { return this._httpDomains; }
    get googleDomains() { return this._googleDomains; }
    get timeout() { return this._timeout; }
    /**
     * Check against a single proxy with minimal configuration.
     *
     * @param address The proxy's IP address
     * @param port The proxy's port
     * @param settings The settings for the proxy
     */
    static async fastCheck(address, port, settings = {}) {
        const agent = new https_proxy_agent_1.default.HttpsProxyAgent(`http://${address}:${port}`);
        const res = {
            httpsScore: 0,
            httpScore: 0,
            googleScore: 0,
            failed: []
        };
        const process = [];
        // Validate against the three different domain types
        for (let domain of this.s_httpsDomains) {
            process.push(node_fetch_1.default(domain, {
                agent: agent,
                timeout: 1000
            })
                .then(() => { res.httpsScore += 1; })
                .catch(() => { res.failed.push(domain); }));
        }
        for (let domain of this.s_httpDomains) {
            process.push(node_fetch_1.default(domain, {
                agent: agent,
                timeout: 1000
            })
                .then(() => { res.httpScore += 1; })
                .catch(() => { res.failed.push(domain); }));
        }
        for (let domain of this.s_googleDomains) {
            process.push(node_fetch_1.default(domain, {
                agent: agent,
                timeout: 1000
            })
                .then(() => { res.googleScore += 1; })
                .catch(() => { res.failed.push(domain); }));
        }
        await Promise.all(process);
        return res;
    }
}
exports.ProxyManager = ProxyManager;
ProxyManager.s_httpsDomains = ["https://wikipedia.org/"];
ProxyManager.s_httpDomains = ["http://wikipedia.org/"];
ProxyManager.s_googleDomains = ["https://google.com/"];
ProxyManager.timeout = 1000;
